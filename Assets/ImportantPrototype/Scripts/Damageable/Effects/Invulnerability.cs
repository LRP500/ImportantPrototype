using System;
using ImportantPrototype.Gameplay;
using Sirenix.OdinInspector;
using UniRx;
using UnityEngine;

namespace ImportantPrototype.Characters
{
    public class Invulnerability : DamageTakenEffect
    {
        private static readonly int Invulnerable = Animator.StringToHash("Invulnerable");

        [MinValue(0)]
        [SerializeField]
        private float _invulnerability;

        [SerializeField]
        private Animator _animator;
        
        private Damageable _damageable;

        protected override void Awake()
        {
            base.Awake();
            _damageable = GetComponent<Damageable>();
        }

        protected override void Trigger()
        {
            SetInvulnerable();
        }

        private void SetInvulnerable()
        {
            Observable.Timer(TimeSpan.FromSeconds(_invulnerability))
                .DoOnSubscribe(() => SetInvulnerable(true))
                .Subscribe(_ => SetInvulnerable(false))
                .AddTo(gameObject);
        }

        private void SetInvulnerable(bool invulnerable)
        {
            _damageable.SetDamageable(!invulnerable);
            _animator.SetBool(Invulnerable, invulnerable);
        }
    }
}